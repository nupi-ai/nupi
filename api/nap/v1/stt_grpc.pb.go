// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.33.0
// source: nap/v1/stt.proto

package napv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpeechToTextService_StreamTranscription_FullMethodName = "/nupi.nap.v1.SpeechToTextService/StreamTranscription"
)

// SpeechToTextServiceClient is the client API for SpeechToTextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechToTextServiceClient interface {
	StreamTranscription(ctx context.Context, opts ...grpc.CallOption) (SpeechToTextService_StreamTranscriptionClient, error)
}

type speechToTextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechToTextServiceClient(cc grpc.ClientConnInterface) SpeechToTextServiceClient {
	return &speechToTextServiceClient{cc}
}

func (c *speechToTextServiceClient) StreamTranscription(ctx context.Context, opts ...grpc.CallOption) (SpeechToTextService_StreamTranscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechToTextService_ServiceDesc.Streams[0], SpeechToTextService_StreamTranscription_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextServiceStreamTranscriptionClient{stream}
	return x, nil
}

type SpeechToTextService_StreamTranscriptionClient interface {
	Send(*StreamTranscriptionRequest) error
	Recv() (*Transcript, error)
	grpc.ClientStream
}

type speechToTextServiceStreamTranscriptionClient struct {
	grpc.ClientStream
}

func (x *speechToTextServiceStreamTranscriptionClient) Send(m *StreamTranscriptionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechToTextServiceStreamTranscriptionClient) Recv() (*Transcript, error) {
	m := new(Transcript)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechToTextServiceServer is the server API for SpeechToTextService service.
// All implementations must embed UnimplementedSpeechToTextServiceServer
// for forward compatibility
type SpeechToTextServiceServer interface {
	StreamTranscription(SpeechToTextService_StreamTranscriptionServer) error
	mustEmbedUnimplementedSpeechToTextServiceServer()
}

// UnimplementedSpeechToTextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechToTextServiceServer struct {
}

func (UnimplementedSpeechToTextServiceServer) StreamTranscription(SpeechToTextService_StreamTranscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTranscription not implemented")
}
func (UnimplementedSpeechToTextServiceServer) mustEmbedUnimplementedSpeechToTextServiceServer() {}

// UnsafeSpeechToTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechToTextServiceServer will
// result in compilation errors.
type UnsafeSpeechToTextServiceServer interface {
	mustEmbedUnimplementedSpeechToTextServiceServer()
}

func RegisterSpeechToTextServiceServer(s grpc.ServiceRegistrar, srv SpeechToTextServiceServer) {
	s.RegisterService(&SpeechToTextService_ServiceDesc, srv)
}

func _SpeechToTextService_StreamTranscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechToTextServiceServer).StreamTranscription(&speechToTextServiceStreamTranscriptionServer{stream})
}

type SpeechToTextService_StreamTranscriptionServer interface {
	Send(*Transcript) error
	Recv() (*StreamTranscriptionRequest, error)
	grpc.ServerStream
}

type speechToTextServiceStreamTranscriptionServer struct {
	grpc.ServerStream
}

func (x *speechToTextServiceStreamTranscriptionServer) Send(m *Transcript) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechToTextServiceStreamTranscriptionServer) Recv() (*StreamTranscriptionRequest, error) {
	m := new(StreamTranscriptionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechToTextService_ServiceDesc is the grpc.ServiceDesc for SpeechToTextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechToTextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.nap.v1.SpeechToTextService",
	HandlerType: (*SpeechToTextServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTranscription",
			Handler:       _SpeechToTextService_StreamTranscription_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nap/v1/stt.proto",
}
