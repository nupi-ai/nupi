// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.33.0
// source: api/grpc/v1/nupi.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DaemonService_Status_FullMethodName = "/nupi.api.v1.DaemonService/Status"
)

// DaemonServiceClient is the client API for DaemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonServiceClient interface {
	Status(ctx context.Context, in *DaemonStatusRequest, opts ...grpc.CallOption) (*DaemonStatusResponse, error)
}

type daemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonServiceClient(cc grpc.ClientConnInterface) DaemonServiceClient {
	return &daemonServiceClient{cc}
}

func (c *daemonServiceClient) Status(ctx context.Context, in *DaemonStatusRequest, opts ...grpc.CallOption) (*DaemonStatusResponse, error) {
	out := new(DaemonStatusResponse)
	err := c.cc.Invoke(ctx, DaemonService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServiceServer is the server API for DaemonService service.
// All implementations must embed UnimplementedDaemonServiceServer
// for forward compatibility
type DaemonServiceServer interface {
	Status(context.Context, *DaemonStatusRequest) (*DaemonStatusResponse, error)
	mustEmbedUnimplementedDaemonServiceServer()
}

// UnimplementedDaemonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServiceServer struct {
}

func (UnimplementedDaemonServiceServer) Status(context.Context, *DaemonStatusRequest) (*DaemonStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDaemonServiceServer) mustEmbedUnimplementedDaemonServiceServer() {}

// UnsafeDaemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServiceServer will
// result in compilation errors.
type UnsafeDaemonServiceServer interface {
	mustEmbedUnimplementedDaemonServiceServer()
}

func RegisterDaemonServiceServer(s grpc.ServiceRegistrar, srv DaemonServiceServer) {
	s.RegisterService(&DaemonService_ServiceDesc, srv)
}

func _DaemonService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).Status(ctx, req.(*DaemonStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DaemonService_ServiceDesc is the grpc.ServiceDesc for DaemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DaemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.api.v1.DaemonService",
	HandlerType: (*DaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _DaemonService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/nupi.proto",
}

const (
	SessionsService_ListSessions_FullMethodName    = "/nupi.api.v1.SessionsService/ListSessions"
	SessionsService_CreateSession_FullMethodName   = "/nupi.api.v1.SessionsService/CreateSession"
	SessionsService_KillSession_FullMethodName     = "/nupi.api.v1.SessionsService/KillSession"
	SessionsService_GetConversation_FullMethodName = "/nupi.api.v1.SessionsService/GetConversation"
)

// SessionsServiceClient is the client API for SessionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionsServiceClient interface {
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	KillSession(ctx context.Context, in *KillSessionRequest, opts ...grpc.CallOption) (*KillSessionResponse, error)
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
}

type sessionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionsServiceClient(cc grpc.ClientConnInterface) SessionsServiceClient {
	return &sessionsServiceClient{cc}
}

func (c *sessionsServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, SessionsService_ListSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, SessionsService_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsServiceClient) KillSession(ctx context.Context, in *KillSessionRequest, opts ...grpc.CallOption) (*KillSessionResponse, error) {
	out := new(KillSessionResponse)
	err := c.cc.Invoke(ctx, SessionsService_KillSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, SessionsService_GetConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionsServiceServer is the server API for SessionsService service.
// All implementations must embed UnimplementedSessionsServiceServer
// for forward compatibility
type SessionsServiceServer interface {
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	KillSession(context.Context, *KillSessionRequest) (*KillSessionResponse, error)
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	mustEmbedUnimplementedSessionsServiceServer()
}

// UnimplementedSessionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionsServiceServer struct {
}

func (UnimplementedSessionsServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedSessionsServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionsServiceServer) KillSession(context.Context, *KillSessionRequest) (*KillSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillSession not implemented")
}
func (UnimplementedSessionsServiceServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedSessionsServiceServer) mustEmbedUnimplementedSessionsServiceServer() {}

// UnsafeSessionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionsServiceServer will
// result in compilation errors.
type UnsafeSessionsServiceServer interface {
	mustEmbedUnimplementedSessionsServiceServer()
}

func RegisterSessionsServiceServer(s grpc.ServiceRegistrar, srv SessionsServiceServer) {
	s.RegisterService(&SessionsService_ServiceDesc, srv)
}

func _SessionsService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionsService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionsService_KillSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).KillSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_KillSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).KillSession(ctx, req.(*KillSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionsService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionsService_ServiceDesc is the grpc.ServiceDesc for SessionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.api.v1.SessionsService",
	HandlerType: (*SessionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSessions",
			Handler:    _SessionsService_ListSessions_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _SessionsService_CreateSession_Handler,
		},
		{
			MethodName: "KillSession",
			Handler:    _SessionsService_KillSession_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _SessionsService_GetConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/nupi.proto",
}

const (
	AdapterRuntimeService_Overview_FullMethodName     = "/nupi.api.v1.AdapterRuntimeService/Overview"
	AdapterRuntimeService_BindAdapter_FullMethodName  = "/nupi.api.v1.AdapterRuntimeService/BindAdapter"
	AdapterRuntimeService_StartAdapter_FullMethodName = "/nupi.api.v1.AdapterRuntimeService/StartAdapter"
	AdapterRuntimeService_StopAdapter_FullMethodName  = "/nupi.api.v1.AdapterRuntimeService/StopAdapter"
)

// AdapterRuntimeServiceClient is the client API for AdapterRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdapterRuntimeServiceClient interface {
	Overview(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdaptersOverviewResponse, error)
	BindAdapter(ctx context.Context, in *BindAdapterRequest, opts ...grpc.CallOption) (*AdapterActionResponse, error)
	StartAdapter(ctx context.Context, in *AdapterSlotRequest, opts ...grpc.CallOption) (*AdapterActionResponse, error)
	StopAdapter(ctx context.Context, in *AdapterSlotRequest, opts ...grpc.CallOption) (*AdapterActionResponse, error)
}

type adapterRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdapterRuntimeServiceClient(cc grpc.ClientConnInterface) AdapterRuntimeServiceClient {
	return &adapterRuntimeServiceClient{cc}
}

func (c *adapterRuntimeServiceClient) Overview(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdaptersOverviewResponse, error) {
	out := new(AdaptersOverviewResponse)
	err := c.cc.Invoke(ctx, AdapterRuntimeService_Overview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterRuntimeServiceClient) BindAdapter(ctx context.Context, in *BindAdapterRequest, opts ...grpc.CallOption) (*AdapterActionResponse, error) {
	out := new(AdapterActionResponse)
	err := c.cc.Invoke(ctx, AdapterRuntimeService_BindAdapter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterRuntimeServiceClient) StartAdapter(ctx context.Context, in *AdapterSlotRequest, opts ...grpc.CallOption) (*AdapterActionResponse, error) {
	out := new(AdapterActionResponse)
	err := c.cc.Invoke(ctx, AdapterRuntimeService_StartAdapter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterRuntimeServiceClient) StopAdapter(ctx context.Context, in *AdapterSlotRequest, opts ...grpc.CallOption) (*AdapterActionResponse, error) {
	out := new(AdapterActionResponse)
	err := c.cc.Invoke(ctx, AdapterRuntimeService_StopAdapter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterRuntimeServiceServer is the server API for AdapterRuntimeService service.
// All implementations must embed UnimplementedAdapterRuntimeServiceServer
// for forward compatibility
type AdapterRuntimeServiceServer interface {
	Overview(context.Context, *emptypb.Empty) (*AdaptersOverviewResponse, error)
	BindAdapter(context.Context, *BindAdapterRequest) (*AdapterActionResponse, error)
	StartAdapter(context.Context, *AdapterSlotRequest) (*AdapterActionResponse, error)
	StopAdapter(context.Context, *AdapterSlotRequest) (*AdapterActionResponse, error)
	mustEmbedUnimplementedAdapterRuntimeServiceServer()
}

// UnimplementedAdapterRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdapterRuntimeServiceServer struct {
}

func (UnimplementedAdapterRuntimeServiceServer) Overview(context.Context, *emptypb.Empty) (*AdaptersOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Overview not implemented")
}
func (UnimplementedAdapterRuntimeServiceServer) BindAdapter(context.Context, *BindAdapterRequest) (*AdapterActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAdapter not implemented")
}
func (UnimplementedAdapterRuntimeServiceServer) StartAdapter(context.Context, *AdapterSlotRequest) (*AdapterActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAdapter not implemented")
}
func (UnimplementedAdapterRuntimeServiceServer) StopAdapter(context.Context, *AdapterSlotRequest) (*AdapterActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAdapter not implemented")
}
func (UnimplementedAdapterRuntimeServiceServer) mustEmbedUnimplementedAdapterRuntimeServiceServer() {}

// UnsafeAdapterRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdapterRuntimeServiceServer will
// result in compilation errors.
type UnsafeAdapterRuntimeServiceServer interface {
	mustEmbedUnimplementedAdapterRuntimeServiceServer()
}

func RegisterAdapterRuntimeServiceServer(s grpc.ServiceRegistrar, srv AdapterRuntimeServiceServer) {
	s.RegisterService(&AdapterRuntimeService_ServiceDesc, srv)
}

func _AdapterRuntimeService_Overview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterRuntimeServiceServer).Overview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterRuntimeService_Overview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterRuntimeServiceServer).Overview(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterRuntimeService_BindAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAdapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterRuntimeServiceServer).BindAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterRuntimeService_BindAdapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterRuntimeServiceServer).BindAdapter(ctx, req.(*BindAdapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterRuntimeService_StartAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdapterSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterRuntimeServiceServer).StartAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterRuntimeService_StartAdapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterRuntimeServiceServer).StartAdapter(ctx, req.(*AdapterSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdapterRuntimeService_StopAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdapterSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterRuntimeServiceServer).StopAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdapterRuntimeService_StopAdapter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterRuntimeServiceServer).StopAdapter(ctx, req.(*AdapterSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdapterRuntimeService_ServiceDesc is the grpc.ServiceDesc for AdapterRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdapterRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.api.v1.AdapterRuntimeService",
	HandlerType: (*AdapterRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Overview",
			Handler:    _AdapterRuntimeService_Overview_Handler,
		},
		{
			MethodName: "BindAdapter",
			Handler:    _AdapterRuntimeService_BindAdapter_Handler,
		},
		{
			MethodName: "StartAdapter",
			Handler:    _AdapterRuntimeService_StartAdapter_Handler,
		},
		{
			MethodName: "StopAdapter",
			Handler:    _AdapterRuntimeService_StopAdapter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/nupi.proto",
}

const (
	AudioService_StreamAudioIn_FullMethodName        = "/nupi.api.v1.AudioService/StreamAudioIn"
	AudioService_StreamAudioOut_FullMethodName       = "/nupi.api.v1.AudioService/StreamAudioOut"
	AudioService_InterruptTTS_FullMethodName         = "/nupi.api.v1.AudioService/InterruptTTS"
	AudioService_GetAudioCapabilities_FullMethodName = "/nupi.api.v1.AudioService/GetAudioCapabilities"
)

// AudioServiceClient is the client API for AudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioServiceClient interface {
	StreamAudioIn(ctx context.Context, opts ...grpc.CallOption) (AudioService_StreamAudioInClient, error)
	StreamAudioOut(ctx context.Context, in *StreamAudioOutRequest, opts ...grpc.CallOption) (AudioService_StreamAudioOutClient, error)
	InterruptTTS(ctx context.Context, in *InterruptTTSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAudioCapabilities(ctx context.Context, in *GetAudioCapabilitiesRequest, opts ...grpc.CallOption) (*GetAudioCapabilitiesResponse, error)
}

type audioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioServiceClient(cc grpc.ClientConnInterface) AudioServiceClient {
	return &audioServiceClient{cc}
}

func (c *audioServiceClient) StreamAudioIn(ctx context.Context, opts ...grpc.CallOption) (AudioService_StreamAudioInClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioService_ServiceDesc.Streams[0], AudioService_StreamAudioIn_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &audioServiceStreamAudioInClient{stream}
	return x, nil
}

type AudioService_StreamAudioInClient interface {
	Send(*StreamAudioInRequest) error
	CloseAndRecv() (*StreamAudioInResponse, error)
	grpc.ClientStream
}

type audioServiceStreamAudioInClient struct {
	grpc.ClientStream
}

func (x *audioServiceStreamAudioInClient) Send(m *StreamAudioInRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioServiceStreamAudioInClient) CloseAndRecv() (*StreamAudioInResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamAudioInResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *audioServiceClient) StreamAudioOut(ctx context.Context, in *StreamAudioOutRequest, opts ...grpc.CallOption) (AudioService_StreamAudioOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioService_ServiceDesc.Streams[1], AudioService_StreamAudioOut_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &audioServiceStreamAudioOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AudioService_StreamAudioOutClient interface {
	Recv() (*StreamAudioOutResponse, error)
	grpc.ClientStream
}

type audioServiceStreamAudioOutClient struct {
	grpc.ClientStream
}

func (x *audioServiceStreamAudioOutClient) Recv() (*StreamAudioOutResponse, error) {
	m := new(StreamAudioOutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *audioServiceClient) InterruptTTS(ctx context.Context, in *InterruptTTSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AudioService_InterruptTTS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) GetAudioCapabilities(ctx context.Context, in *GetAudioCapabilitiesRequest, opts ...grpc.CallOption) (*GetAudioCapabilitiesResponse, error) {
	out := new(GetAudioCapabilitiesResponse)
	err := c.cc.Invoke(ctx, AudioService_GetAudioCapabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioServiceServer is the server API for AudioService service.
// All implementations must embed UnimplementedAudioServiceServer
// for forward compatibility
type AudioServiceServer interface {
	StreamAudioIn(AudioService_StreamAudioInServer) error
	StreamAudioOut(*StreamAudioOutRequest, AudioService_StreamAudioOutServer) error
	InterruptTTS(context.Context, *InterruptTTSRequest) (*emptypb.Empty, error)
	GetAudioCapabilities(context.Context, *GetAudioCapabilitiesRequest) (*GetAudioCapabilitiesResponse, error)
	mustEmbedUnimplementedAudioServiceServer()
}

// UnimplementedAudioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioServiceServer struct {
}

func (UnimplementedAudioServiceServer) StreamAudioIn(AudioService_StreamAudioInServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudioIn not implemented")
}
func (UnimplementedAudioServiceServer) StreamAudioOut(*StreamAudioOutRequest, AudioService_StreamAudioOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudioOut not implemented")
}
func (UnimplementedAudioServiceServer) InterruptTTS(context.Context, *InterruptTTSRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterruptTTS not implemented")
}
func (UnimplementedAudioServiceServer) GetAudioCapabilities(context.Context, *GetAudioCapabilitiesRequest) (*GetAudioCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioCapabilities not implemented")
}
func (UnimplementedAudioServiceServer) mustEmbedUnimplementedAudioServiceServer() {}

// UnsafeAudioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioServiceServer will
// result in compilation errors.
type UnsafeAudioServiceServer interface {
	mustEmbedUnimplementedAudioServiceServer()
}

func RegisterAudioServiceServer(s grpc.ServiceRegistrar, srv AudioServiceServer) {
	s.RegisterService(&AudioService_ServiceDesc, srv)
}

func _AudioService_StreamAudioIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioServiceServer).StreamAudioIn(&audioServiceStreamAudioInServer{stream})
}

type AudioService_StreamAudioInServer interface {
	SendAndClose(*StreamAudioInResponse) error
	Recv() (*StreamAudioInRequest, error)
	grpc.ServerStream
}

type audioServiceStreamAudioInServer struct {
	grpc.ServerStream
}

func (x *audioServiceStreamAudioInServer) SendAndClose(m *StreamAudioInResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioServiceStreamAudioInServer) Recv() (*StreamAudioInRequest, error) {
	m := new(StreamAudioInRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AudioService_StreamAudioOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAudioOutRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioServiceServer).StreamAudioOut(m, &audioServiceStreamAudioOutServer{stream})
}

type AudioService_StreamAudioOutServer interface {
	Send(*StreamAudioOutResponse) error
	grpc.ServerStream
}

type audioServiceStreamAudioOutServer struct {
	grpc.ServerStream
}

func (x *audioServiceStreamAudioOutServer) Send(m *StreamAudioOutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AudioService_InterruptTTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterruptTTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).InterruptTTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioService_InterruptTTS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).InterruptTTS(ctx, req.(*InterruptTTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_GetAudioCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).GetAudioCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioService_GetAudioCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).GetAudioCapabilities(ctx, req.(*GetAudioCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioService_ServiceDesc is the grpc.ServiceDesc for AudioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.api.v1.AudioService",
	HandlerType: (*AudioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InterruptTTS",
			Handler:    _AudioService_InterruptTTS_Handler,
		},
		{
			MethodName: "GetAudioCapabilities",
			Handler:    _AudioService_GetAudioCapabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudioIn",
			Handler:       _AudioService_StreamAudioIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAudioOut",
			Handler:       _AudioService_StreamAudioOut_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/grpc/v1/nupi.proto",
}
