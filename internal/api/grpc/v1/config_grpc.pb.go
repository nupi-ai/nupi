// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.33.0
// source: config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigService_GetTransportConfig_FullMethodName    = "/nupi.api.v1.ConfigService/GetTransportConfig"
	ConfigService_UpdateTransportConfig_FullMethodName = "/nupi.api.v1.ConfigService/UpdateTransportConfig"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	GetTransportConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransportConfig, error)
	UpdateTransportConfig(ctx context.Context, in *UpdateTransportConfigRequest, opts ...grpc.CallOption) (*TransportConfig, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetTransportConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransportConfig, error) {
	out := new(TransportConfig)
	err := c.cc.Invoke(ctx, ConfigService_GetTransportConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateTransportConfig(ctx context.Context, in *UpdateTransportConfigRequest, opts ...grpc.CallOption) (*TransportConfig, error) {
	out := new(TransportConfig)
	err := c.cc.Invoke(ctx, ConfigService_UpdateTransportConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	GetTransportConfig(context.Context, *emptypb.Empty) (*TransportConfig, error)
	UpdateTransportConfig(context.Context, *UpdateTransportConfigRequest) (*TransportConfig, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) GetTransportConfig(context.Context, *emptypb.Empty) (*TransportConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateTransportConfig(context.Context, *UpdateTransportConfigRequest) (*TransportConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransportConfig not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetTransportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetTransportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetTransportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetTransportConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateTransportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateTransportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateTransportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateTransportConfig(ctx, req.(*UpdateTransportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.api.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransportConfig",
			Handler:    _ConfigService_GetTransportConfig_Handler,
		},
		{
			MethodName: "UpdateTransportConfig",
			Handler:    _ConfigService_UpdateTransportConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

const (
	AdaptersService_ListAdapters_FullMethodName        = "/nupi.api.v1.AdaptersService/ListAdapters"
	AdaptersService_ListAdapterBindings_FullMethodName = "/nupi.api.v1.AdaptersService/ListAdapterBindings"
	AdaptersService_SetAdapterBinding_FullMethodName   = "/nupi.api.v1.AdaptersService/SetAdapterBinding"
	AdaptersService_ClearAdapterBinding_FullMethodName = "/nupi.api.v1.AdaptersService/ClearAdapterBinding"
)

// AdaptersServiceClient is the client API for AdaptersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdaptersServiceClient interface {
	ListAdapters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAdaptersResponse, error)
	ListAdapterBindings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAdapterBindingsResponse, error)
	SetAdapterBinding(ctx context.Context, in *SetAdapterBindingRequest, opts ...grpc.CallOption) (*AdapterBinding, error)
	ClearAdapterBinding(ctx context.Context, in *ClearAdapterBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adaptersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdaptersServiceClient(cc grpc.ClientConnInterface) AdaptersServiceClient {
	return &adaptersServiceClient{cc}
}

func (c *adaptersServiceClient) ListAdapters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAdaptersResponse, error) {
	out := new(ListAdaptersResponse)
	err := c.cc.Invoke(ctx, AdaptersService_ListAdapters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adaptersServiceClient) ListAdapterBindings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAdapterBindingsResponse, error) {
	out := new(ListAdapterBindingsResponse)
	err := c.cc.Invoke(ctx, AdaptersService_ListAdapterBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adaptersServiceClient) SetAdapterBinding(ctx context.Context, in *SetAdapterBindingRequest, opts ...grpc.CallOption) (*AdapterBinding, error) {
	out := new(AdapterBinding)
	err := c.cc.Invoke(ctx, AdaptersService_SetAdapterBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adaptersServiceClient) ClearAdapterBinding(ctx context.Context, in *ClearAdapterBindingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdaptersService_ClearAdapterBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdaptersServiceServer is the server API for AdaptersService service.
// All implementations must embed UnimplementedAdaptersServiceServer
// for forward compatibility
type AdaptersServiceServer interface {
	ListAdapters(context.Context, *emptypb.Empty) (*ListAdaptersResponse, error)
	ListAdapterBindings(context.Context, *emptypb.Empty) (*ListAdapterBindingsResponse, error)
	SetAdapterBinding(context.Context, *SetAdapterBindingRequest) (*AdapterBinding, error)
	ClearAdapterBinding(context.Context, *ClearAdapterBindingRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdaptersServiceServer()
}

// UnimplementedAdaptersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdaptersServiceServer struct {
}

func (UnimplementedAdaptersServiceServer) ListAdapters(context.Context, *emptypb.Empty) (*ListAdaptersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdapters not implemented")
}
func (UnimplementedAdaptersServiceServer) ListAdapterBindings(context.Context, *emptypb.Empty) (*ListAdapterBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdapterBindings not implemented")
}
func (UnimplementedAdaptersServiceServer) SetAdapterBinding(context.Context, *SetAdapterBindingRequest) (*AdapterBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdapterBinding not implemented")
}
func (UnimplementedAdaptersServiceServer) ClearAdapterBinding(context.Context, *ClearAdapterBindingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAdapterBinding not implemented")
}
func (UnimplementedAdaptersServiceServer) mustEmbedUnimplementedAdaptersServiceServer() {}

// UnsafeAdaptersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdaptersServiceServer will
// result in compilation errors.
type UnsafeAdaptersServiceServer interface {
	mustEmbedUnimplementedAdaptersServiceServer()
}

func RegisterAdaptersServiceServer(s grpc.ServiceRegistrar, srv AdaptersServiceServer) {
	s.RegisterService(&AdaptersService_ServiceDesc, srv)
}

func _AdaptersService_ListAdapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdaptersServiceServer).ListAdapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdaptersService_ListAdapters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdaptersServiceServer).ListAdapters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdaptersService_ListAdapterBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdaptersServiceServer).ListAdapterBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdaptersService_ListAdapterBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdaptersServiceServer).ListAdapterBindings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdaptersService_SetAdapterBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAdapterBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdaptersServiceServer).SetAdapterBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdaptersService_SetAdapterBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdaptersServiceServer).SetAdapterBinding(ctx, req.(*SetAdapterBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdaptersService_ClearAdapterBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAdapterBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdaptersServiceServer).ClearAdapterBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdaptersService_ClearAdapterBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdaptersServiceServer).ClearAdapterBinding(ctx, req.(*ClearAdapterBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdaptersService_ServiceDesc is the grpc.ServiceDesc for AdaptersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdaptersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.api.v1.AdaptersService",
	HandlerType: (*AdaptersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAdapters",
			Handler:    _AdaptersService_ListAdapters_Handler,
		},
		{
			MethodName: "ListAdapterBindings",
			Handler:    _AdaptersService_ListAdapterBindings_Handler,
		},
		{
			MethodName: "SetAdapterBinding",
			Handler:    _AdaptersService_SetAdapterBinding_Handler,
		},
		{
			MethodName: "ClearAdapterBinding",
			Handler:    _AdaptersService_ClearAdapterBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

const (
	QuickstartService_GetStatus_FullMethodName = "/nupi.api.v1.QuickstartService/GetStatus"
	QuickstartService_Update_FullMethodName    = "/nupi.api.v1.QuickstartService/Update"
)

// QuickstartServiceClient is the client API for QuickstartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuickstartServiceClient interface {
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuickstartStatusResponse, error)
	Update(ctx context.Context, in *UpdateQuickstartRequest, opts ...grpc.CallOption) (*QuickstartStatusResponse, error)
}

type quickstartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuickstartServiceClient(cc grpc.ClientConnInterface) QuickstartServiceClient {
	return &quickstartServiceClient{cc}
}

func (c *quickstartServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuickstartStatusResponse, error) {
	out := new(QuickstartStatusResponse)
	err := c.cc.Invoke(ctx, QuickstartService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickstartServiceClient) Update(ctx context.Context, in *UpdateQuickstartRequest, opts ...grpc.CallOption) (*QuickstartStatusResponse, error) {
	out := new(QuickstartStatusResponse)
	err := c.cc.Invoke(ctx, QuickstartService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuickstartServiceServer is the server API for QuickstartService service.
// All implementations must embed UnimplementedQuickstartServiceServer
// for forward compatibility
type QuickstartServiceServer interface {
	GetStatus(context.Context, *emptypb.Empty) (*QuickstartStatusResponse, error)
	Update(context.Context, *UpdateQuickstartRequest) (*QuickstartStatusResponse, error)
	mustEmbedUnimplementedQuickstartServiceServer()
}

// UnimplementedQuickstartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuickstartServiceServer struct {
}

func (UnimplementedQuickstartServiceServer) GetStatus(context.Context, *emptypb.Empty) (*QuickstartStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedQuickstartServiceServer) Update(context.Context, *UpdateQuickstartRequest) (*QuickstartStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedQuickstartServiceServer) mustEmbedUnimplementedQuickstartServiceServer() {}

// UnsafeQuickstartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuickstartServiceServer will
// result in compilation errors.
type UnsafeQuickstartServiceServer interface {
	mustEmbedUnimplementedQuickstartServiceServer()
}

func RegisterQuickstartServiceServer(s grpc.ServiceRegistrar, srv QuickstartServiceServer) {
	s.RegisterService(&QuickstartService_ServiceDesc, srv)
}

func _QuickstartService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickstartServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickstartService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickstartServiceServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuickstartService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuickstartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickstartServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuickstartService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickstartServiceServer).Update(ctx, req.(*UpdateQuickstartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuickstartService_ServiceDesc is the grpc.ServiceDesc for QuickstartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuickstartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nupi.api.v1.QuickstartService",
	HandlerType: (*QuickstartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _QuickstartService_GetStatus_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _QuickstartService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
